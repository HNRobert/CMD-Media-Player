name: Release Build

on:
  push:
    tags:
      - "v*"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      release_notes: ${{ steps.release_notes.outputs.NOTES }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Generate Release Notes
        id: release_notes
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
            COMPARE_LINK="https://github.com/$GITHUB_REPOSITORY/commits/${CURRENT_TAG}"
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
            COMPARE_LINK="https://github.com/$GITHUB_REPOSITORY/compare/${LAST_TAG}...${CURRENT_TAG}"
          fi
          
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## ${CURRENT_TAG}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Changes in this release:" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: ${COMPARE_LINK}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-macos:
    needs: setup
    runs-on: macos-latest
    outputs:
      dep_versions: ${{ steps.get_versions.outputs.VERSIONS }}
    strategy:
      matrix:
        arch: [arm64, x86_64]
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          brew update
          brew install cmake ffmpeg opencv sdl2 ncurses readline

      - name: Build
        run: |
          mkdir build && cd build
          cmake ..
          make

      - name: Create macOS Package
        run: |
          cd build
          zip -r CMD-Media-Player-v${{ needs.setup.outputs.version }}-macos-${{ matrix.arch }}.zip CMD-Media-Player

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.arch }}-build
          path: build/CMD-Media-Player-v${{ needs.setup.outputs.version }}-macos-${{ matrix.arch }}.zip

      - name: Get Dependency Versions
        id: get_versions
        if: matrix.arch == 'arm64'
        run: |
          echo "VERSIONS<<EOF" >> $GITHUB_OUTPUT
          echo "### Dependencies (macOS)" >> $GITHUB_OUTPUT
          echo "- opencv: $(brew list --versions opencv | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- ffmpeg: $(brew list --versions ffmpeg | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- sdl2: $(brew list --versions sdl2 | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- ncurses: $(brew list --versions ncurses | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- readline: $(brew list --versions readline | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-linux:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    outputs:
      dep_versions: ${{ steps.get_versions.outputs.VERSIONS }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.arch == 'arm64'

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
          echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
          
      - name: Install dependencies
        run: |
          brew update
          brew install cmake ffmpeg opencv sdl2 ncurses readline

      - name: Build
        run: |
          mkdir build && cd build
          cmake ..
          make

      - name: Create Linux Package
        run: |
          cd build
          tar -czf CMD-Media-Player-v${{ needs.setup.outputs.version }}-linux-${{ matrix.arch }}.tar.gz CMD-Media-Player

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.arch }}-build
          path: build/CMD-Media-Player-v${{ needs.setup.outputs.version }}-linux-${{ matrix.arch }}.tar.gz

      - name: Get Dependency Versions
        id: get_versions
        if: matrix.arch == 'x86_64'
        run: |
          echo "VERSIONS<<EOF" >> $GITHUB_OUTPUT
          echo "### Dependencies (Linux)" >> $GITHUB_OUTPUT
          echo "- opencv: $(brew list --versions opencv | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- ffmpeg: $(brew list --versions ffmpeg | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- sdl2: $(brew list --versions sdl2 | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- ncurses: $(brew list --versions ncurses | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "- readline: $(brew list --versions readline | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    needs: [setup, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Check Version Type
        id: version_type
        run: |
          if [[ "${{ needs.setup.outputs.version }}" =~ .*beta.* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: ${{ needs.setup.outputs.version }}
          body: |
            ${{ needs.setup.outputs.release_notes }}
            
            ${{ needs.build-macos.outputs.dep_versions }}
            
            ${{ needs.build-linux.outputs.dep_versions }}
            
            ## Downloads
            - macOS ARM64: [CMD-Media-Player-v${{ needs.setup.outputs.version }}-macos-arm64.zip]
            - macOS x86_64: [CMD-Media-Player-v${{ needs.setup.outputs.version }}-macos-x86_64.zip]
            - Linux ARM64: [CMD-Media-Player-v${{ needs.setup.outputs.version }}-linux-arm64.tar.gz]
            - Linux x86_64: [CMD-Media-Player-v${{ needs.setup.outputs.version }}-linux-x86_64.tar.gz]
          files: |
            artifacts/macos-arm64-build/*
            artifacts/macos-x86_64-build/*
            artifacts/linux-arm64-build/*
            artifacts/linux-x86_64-build/*
          draft: false
          prerelease: ${{ steps.version_type.outputs.IS_PRERELEASE }}
